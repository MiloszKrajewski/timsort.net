<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// This files has been generated using TimSort.tt
// all your changes to this file will be lost

#region Licence

/*
 * Copyright (C) 2008 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
#endregion

#region Notes
//------------------------------------------------------------------------------
// Java implementation:
//
// A stable, adaptive, iterative mergesort that requires far fewer than
// n lg(n) comparisons when running on partially sorted arrays, while
// offering performance comparable to a traditional mergesort when run
// on random arrays.  Like all proper mergesorts, this sort is stable and
// runs O(n log n) time (worst case).  In the worst case, this sort requires
// temporary storage space for n/2 object references; in the best case,
// it requires only a small constant amount of space.
// 
// This implementation was adapted from Tim Peters's list sort for
// Python, which is described in detail here:
// http://svn.python.org/projects/python/trunk/Objects/listsort.txt
// 
// Tim's C code may be found here:
// http://svn.python.org/projects/python/trunk/Objects/listobject.c
// 
// The underlying techniques are described in this paper (and may have
// even earlier origins):
// 
// "Optimistic Sorting and Information Theoretic Complexity"
// Peter McIlroy
// SODA (Fourth Annual ACM-SIAM Symposium on Discrete Algorithms),
// pp 467-474, Austin, Texas, 25-27 January 1993.
// 
// While the API to this class consists solely of static methods, it is
// (privately) instantiable; a TimSort instance holds the state of an ongoing
// sort, assuming the input array is large enough to warrant the full-blown
// TimSort. Small arrays are sorted in place, using a binary insertion sort.
// 
// author: Josh Bloch
//------------------------------------------------------------------------------
// C# implementation:
//
// This implementation was adapted from Josh Bloch array sort for Java, 
// which has been found here:
// http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/main/java/util/TimSort.java?view=co
// 
// author: Milosz Krajewski
//------------------------------------------------------------------------------
#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;

// ReSharper disable CheckNamespace
<#
    var native_types = new[] { 
        "Byte", "SByte", "Int16", "UInt16", "Int32", "UInt32", "Int64", "UInt64",
        "Single", "Double", "Decimal",
        "Char", 
        "DateTime", "TimeSpan",
    };
#>

namespace System.Linq
{
    using TimSort;

	#region partial class TimSortExtender

	public static partial class TimSortExtender
	{

		#region TryNativeTimSort

        /// <summary>Tries to use native sorting on given array.</summary>
        /// <typeparam name="T">Any type.</typeparam>
        /// <param name="array">The array.</param>
        /// <returns><c>true</c> if sorted using native types, <c>false</c> otherwise.</returns>
		internal static bool TryNativeTimSort<T>(T[] array)
		{
			if (array == null) return true;
			var typeofT = typeof (T);
			if (!typeofT.IsValueType) return false;

<# foreach (var type in native_types) { #>
		    if (typeofT == typeof (<#= type #>)) 
			{
				// at runtme we know it is <#= type #>[], but at compile time cast is required
				var typed = array as <#= type #>[];
				if (typed == null) return false;
				<#= type #>ArrayTimSort.Sort(typed);
				return true;
			}
<# } #>
			return false;
		}

        /// <summary>Tries to use native sorting on given array.</summary>
        /// <typeparam name="T">Any type.</typeparam>
        /// <param name="array">The array.</param>
        /// <param name="lo">The low limit.</param>
        /// <param name="hi">The high limit.</param>
        /// <returns><c>true</c> if sorted using native types, <c>false</c> otherwise.</returns>
		internal static bool TryNativeTimSort<T>(T[] array, int lo, int hi)
		{
			if (array == null) return true;
			var typeofT = typeof (T);
			if (!typeofT.IsValueType) return false;

<# foreach (var type in native_types) { #>
		    if (typeofT == typeof (<#= type #>)) 
			{
				// at runtme we know it is <#= type #>[], but at compile time cast is required
				var typed = array as <#= type #>[];
				if (typed == null) return false;
				<#= type #>ArrayTimSort.Sort(typed, lo, hi);
				return true;
			}
<# } #>
			return false;
		}

		#endregion

<# 
	var containers = new[] {
		new { Name = "Array", Type = "T[]", Length = "Length", Native = true, },
		new { Name = "List", Type = "List<T>", Length = "Count", Native = false, },
		new { Name = "IList", Type = "IList<T>", Length = "Count", Native = false, }
	};

	foreach (var container in containers)
	{
		var name = container.Name;
		var type = container.Type;
		var length = container.Length;
		var native = container.Native;
#>
	    #region <#= name #>

		/// <summary>Sorts the specified array.</summary>
		/// <typeparam name="T">Type of item.</typeparam>
		/// <param name="array">The array.</param>
		public static void TimSort<T>(this <#= type #> array)
		{
			if (array == null) throw new ArgumentNullException("array");
			if (array.<#= length #> < 2) return;

<# if (native) { #>
		    if (TryNativeTimSort(array)) return;
<# } else { #>
			var simpler = GetInternalMember(array);
			if (simpler != null)
			{
				TimSort(simpler, 0, array.<#= length #>);
				return;
			}
<# } #>

		    if (TryComparableTimeSort(array)) return;
            Any<#= name #>TimSort<T>.Sort(array, Comparer<T>.Default.Compare);
		}

        /// <summary>Sorts the specified array.</summary>
        /// <typeparam name="T">Type of item.</typeparam>
        /// <param name="array">The array.</param>
        /// <param name="start">The start.</param>
        /// <param name="length">The length.</param>
        public static void TimSort<T>(this <#= type #> array, int start, int length)
        {
			if (array == null) throw new ArgumentNullException("array");
            length = Math.Min(length, array.<#= length #> - start);
            if (length < 2) return;

<# if (native) { #>
            if (TryNativeTimSort(array, start, start + length)) return; 
<# } else { #>
			var simpler = GetInternalMember(array);
			if (simpler != null)
			{
				TimSort(simpler, start, length);
				return;
			}
<# } #>

            if (TryComparableTimeSort(array, start, start + length)) return;

            Any<#= name #>TimSort<T>.Sort(array, start, start + length, Comparer<T>.Default.Compare);
        }

        public static void TimSort<T>(this <#= type #> array, int start, int length, Comparison<T> compare)
        {
			if (array == null) throw new ArgumentNullException("array");
            if (compare == null) throw new ArgumentNullException("compare");
            length = Math.Min(length, array.<#= length #> - start);
            if (length < 2) return;

<# if (!native) { #>
			var simpler = GetInternalMember(array);
			if (simpler != null) 
			{ 
				TimSort(simpler, start, length, compare); 
				return; 
			}
<# } #>

            Any<#= name #>TimSort<T>.Sort(array, start, start + length, compare);
        }

	    public static void TimSort<T>(this <#= type #> array, Comparison<T> compare)
	    {
			if (array == null) throw new ArgumentNullException("array");
            if (compare == null) throw new ArgumentNullException("compare");
			if (array.<#= length #> < 2) return;

<# if (!native) { #>
			var simpler = GetInternalMember(array);
			if (simpler != null) 
			{ 
				TimSort(simpler, 0, array.<#= length #>, compare); 
				return; 
			}
<# } #>

            Any<#= name #>TimSort<T>.Sort(array, compare);
	    }

        public static void TimSort<T>(this <#= type #> array, int start, int length, Comparer<T> comparer)
        {
			if (array == null) throw new ArgumentNullException("array");
            if (comparer == null) throw new ArgumentNullException("comparer");
            length = Math.Min(length, array.<#= length #> - start);
            if (length < 2) return;

<# if (!native) { #>
			var simpler = GetInternalMember(array);
			if (simpler != null) 
			{ 
				TimSort(simpler, start, length, comparer); 
				return; 
			}
<# } #>

            Any<#= name #>TimSort<T>.Sort(array, start, start + length, comparer.Compare);
        }

        public static void TimSort<T>(this <#= type #> array, Comparer<T> comparer)
        {
			if (array == null) throw new ArgumentNullException("array");
            if (comparer == null) throw new ArgumentNullException("comparer");
			if (array.<#= length #> < 2) return;

<# if (!native) { #>
			var simpler = GetInternalMember(array);
			if (simpler != null) 
			{ 
				TimSort(simpler, 0, array.<#= length #>, comparer); 
				return; 
			}
<# } #>

            Any<#= name #>TimSort<T>.Sort(array, comparer.Compare);
        }

        #endregion

<#
	}
#>
	}

	#endregion
}

<# 
    var list = new List<VectorDefinition>();

    foreach (var native_type in native_types)
    {
        var array_sorter = native_type + "Array";
        list.Add(new VectorDefinition { 
            Name = array_sorter, ItemType = native_type, CompareMethod = CompareMethod.Native });
		/*
        list.Add(new VectorDefinition { 
            Name = native_type + "List", VectorType = "List<" + native_type + ">", ItemType = native_type, CompareMethod = CompareMethod.Native, ArraySorter = array_sorter });
        list.Add(new VectorDefinition { 
            Name = native_type + "IList", VectorType = "IList<" + native_type + ">", ItemType = native_type, CompareMethod = CompareMethod.Native, ArraySorter = array_sorter });
		*/
    }

    list.Add(new VectorDefinition { 
		Name = "AnyArray", CompareMethod = CompareMethod.Comparer });
    list.Add(new VectorDefinition { 
		Name = "AnyList", VectorType = "List<T>", CompareMethod = CompareMethod.Comparer, ArraySorter = "AnyArray" });
    list.Add(new VectorDefinition { 
		Name = "AnyIList", VectorType = "IList<T>", CompareMethod = CompareMethod.Comparer, ArraySorter = "AnyArray" });

    list.Add(new VectorDefinition { 
		Name = "ComparableArray", CompareMethod = CompareMethod.Comparable });
    list.Add(new VectorDefinition { 
		Name = "ComparableList", VectorType = "List<T>", CompareMethod = CompareMethod.Comparable, ArraySorter = "ComparableArray" });
    list.Add(new VectorDefinition { 
		Name = "ComparableIList", VectorType = "IList<T>", CompareMethod = CompareMethod.Comparable, ArraySorter = "ComparableArray" });
#>
namespace TimSort
{
<#
	foreach (var item in list) 
	{ 
		var usesComparer = (item.CompareMethod == CompareMethod.Comparer);
        var isComparable = (item.CompareMethod == CompareMethod.Comparable);
        var isTemplate = item.IsTemplate;
        var isArray = item.IsArray;
		var isNative = item.ItemType != null;
		
		var itemType = item.ItemType ?? "T";
        var arrayType = item.VectorType ?? itemType + "[]";

		var isArrayOfNative = isArray && isNative;
		
		var className = string.Format("{0}TimSort", item.Name);
        var arraySorterName = item.ArraySorter == null ? "" : string.Format("{0}TimSort{1}.", item.ArraySorter, isTemplate ? "<T>" : "");
		var fullClassName = string.Format("{0}{1}", className, isTemplate ? "<T>" : string.Empty);
		var docFullClassName = fullClassName.Replace("<", "&lt;").Replace(">", "&gt;");
		var baseClassName = string.Format("TimSortBase<{0}, {1}>", arrayType, itemType);
		
		var arrayArg = string.Format("{0} array", arrayType);
		var comparerArg = usesComparer ? string.Format(", Comparison<{0}> comparer", itemType) : string.Empty;
		var comparerOpt = usesComparer ? ", comparer" : string.Empty;
		
		var classRestrictions = isComparable && isTemplate ? " where T: IComparable<T>" : string.Empty;
		var lengthProperty = isArray ? "Length" : "Count";
        var copyRangeFunc = isArray ? "ArrayCopyRange" : "IndexedCopyRange";
        var reverseRangeFunc = isArray ? "ArrayReverseRange" : "IndexedReverseRange";
		
		Func<string, string, string, string> cmp;
		
		if (usesComparer)
		{
			cmp = (a, b, c) => string.Format("comparer({0}, {1}) {2} 0", a, b, c);
		}
		else if (isComparable)
		{
			cmp = (a, b, c) => string.Format("{0}.CompareTo({1}) {2} 0", a, b, c);
		}
		else
		{
			cmp = (a, b, c) => string.Format("{0} {2} {1}", a, b, c);
		}
#>

	#region class <#= fullClassName #>

	/// <summary>TimSort implementation for <#= item.Name #>.</summary>
<# if (isTemplate) { #>
	/// <typeparam name="T">Type of item.</typeparam>
<# } #>
	internal class <#= fullClassName #>: <#= baseClassName #><#= classRestrictions #>
	{
<# if (usesComparer) { #>
		/// <summary>The comparator for this sort.</summary>
		private readonly Comparison<<#= itemType #>> _comparer;

<# } #>
		/// <summary>
		/// Prevents a default instance of the <#= docFullClassName #> class from being created.
		/// Creates a TimSort instance to maintain the state of an ongoing sort.
		/// </summary>
		/// <param name="array">The array to be sorted.</param>
<# if (usesComparer) { #>
		/// <param name="comparer">The comparator to determine the order of the sort.</param>
<# } #>
		private <#= className #>(<#= arrayArg #><#= comparerArg #>)
			: base(array, array.<#= lengthProperty #>)
		{
<# if (usesComparer) { #>
			_comparer = comparer;
<# } #>
		}

		/// <summary>Sorts the specified array.</summary>
		/// <param name="array">Array to be sorted.</param>
<# if (usesComparer) { #>
		/// <param name="comparer">Comparer.</param>
<# } #>
		public static void Sort(<#= arrayArg #><#= comparerArg #>)
		{
			Sort(array, 0, array.<#= lengthProperty #><#= comparerOpt #>);
		}

<# if (!usesComparer) { #>
		// redirection
		internal static void SortAll(<#= arrayArg #>) { Sort(array); }

		// redirection
		internal static void SortRange(<#= arrayArg #>, int lo, int hi) { Sort(array, lo, hi); }

<# } #>
		/// <summary>Sorts the specified array.</summary>
		/// <param name="array">Array to be sorted.</param>
		/// <param name="lo">the index of the first element in the range to be sorted.</param>
		/// <param name="hi">the index after the last element in the range to be sorted.</param>
<# if (usesComparer) { #>
		/// <param name="comparer">The comparator to determine the order of the sort.</param>
<# } #>
		public static void Sort(<#= arrayArg #>, int lo, int hi<#= comparerArg #>)
		{
			CheckRange(array.<#= lengthProperty #>, lo, hi);

			var width = hi - lo;
			if (width < 2) return; // Arrays of size 0 and 1 are always sorted

			// If array is small, do a "mini-TimSort" with no merges
			if (width < MIN_MERGE)
			{
				var initRunLength = CountRunAndMakeAscending(array, lo, hi<#= comparerOpt #>);
				BinarySort(array, lo, hi, lo + initRunLength<#= comparerOpt #>);
				return;
			}

			// March over the array once, left to right, finding natural runs,
			// extending short natural runs to minRun elements, and merging runs
			// to maintain stack invariant.
			var sorter = new <#= fullClassName #>(array<#= comparerOpt #>);
			int minRun = GetMinimumRunLength(width);
			do
			{
				// Identify next run
				var runLen = CountRunAndMakeAscending(array, lo, hi<#= comparerOpt #>);

				// If run is short, extend to min(minRun, nRemaining)
				if (runLen < minRun)
				{
					var force = width <= minRun ? width : minRun;
					BinarySort(array, lo, lo + force, lo + runLen<#= comparerOpt #>);
					runLen = force;
				}

				// Push run onto pending-run stack, and maybe merge
				sorter.PushRun(lo, runLen);
				sorter.MergeCollapse();

				// Advance to find next run
				lo += runLen;
				width -= runLen;
			} while (width != 0);

			// Merge all remaining runs to complete sort
			Debug.Assert(lo == hi);
			sorter.MergeForceCollapse();
			Debug.Assert(sorter._stackSize == 1);
		}

		/// <summary>
		/// Sorts the specified portion of the specified array using a binary insertion sort. This is the best method for 
		/// sorting small numbers of elements. It requires O(n log n) compares, but O(n^2) data movement (worst case).
		/// If the initial part of the specified range is already sorted, this method can take advantage of it: the method 
		/// assumes that the elements from index <c>lo</c>, inclusive, to <c>start</c>, exclusive are already sorted.
		/// </summary>
		/// <param name="array">the array in which a range is to be sorted.</param>
		/// <param name="lo">the index of the first element in the range to be sorted.</param>
		/// <param name="hi">the index after the last element in the range to be sorted.</param>
		/// <param name="start">start the index of the first element in the range that is not already known to be sorted 
		/// (<c><![CDATA[lo <= start <= hi]]></c>)</param>
<# if (usesComparer) { #>
		/// <param name="comparer">The comparator to used for the sort.</param>
<# } #>
<# if (isArrayOfNative) { #>
		#if UNSAFE
		unsafe
		#endif
<# } #>
		private static void BinarySort(<#= arrayArg #>, int lo, int hi, int start<#= comparerArg #>)
		{
<# if (isArrayOfNative) { #>
			#if UNSAFE
			fixed (<#= itemType #> * a = &array[0])
			#else
			var a = array;
			#endif
<# } else { #>
			var a = array;
<# } #>
			{ // fixed (...)
				Debug.Assert(lo <= start && start <= hi);

				if (start == lo) start++;

				for (/* nothing */; start < hi; start++)
				{
					var pivot = a[start];

					// Set left (and right) to the index where a[start] (pivot) belongs
					var left = lo;
					var right = start;
					Debug.Assert(left <= right);

					// Invariants:
					// * pivot >= all in [lo, left).
					// * pivot < all in [right, start).
					while (left < right)
					{
						var mid = (left + right) >> 1;
						if (<#= cmp("pivot", "a[mid]", "<") #>) // c(pivot, a[mid]) < 0
						{
							right = mid;
						}
						else
						{
							left = mid + 1;
						}
					}
					Debug.Assert(left == right);

					// The invariants still hold: pivot >= all in [lo, left) and
					// pivot < all in [left, start), so pivot belongs at left.  Note
					// that if there are elements equal to pivot, left points to the
					// first slot after them -- that's why this sort is stable.
					// Slide elements over to make room to make room for pivot.

					var n = start - left; // The number of elements to move

					// switch is just an optimization for copyRange in default case
					switch (n)
					{
						case 2:
							a[left + 2] = a[left + 1];
							a[left + 1] = a[left];
							break;
						case 1:
							a[left + 1] = a[left];
							break;
						default:
							<#= copyRangeFunc #>(a, left, left + 1, n);
							break;
					}
					a[left] = pivot;
				}
			} // fixed (...)
		}

		/// <summary>
		/// Returns the length of the run beginning at the specified position in
		/// the specified array and reverses the run if it is descending (ensuring
		/// that the run will always be ascending when the method returns).
		/// A run is the longest ascending sequence with: <c><![CDATA[a[lo] <= a[lo + 1] <= a[lo + 2] <= ...]]></c>
		/// or the longest descending sequence with: <c><![CDATA[a[lo] >  a[lo + 1] >  a[lo + 2] >  ...]]></c>
		/// For its intended use in a stable mergesort, the strictness of the
		/// definition of "descending" is needed so that the call can safely
		/// reverse a descending sequence without violating stability.
		/// </summary>
		/// <param name="array">the array in which a run is to be counted and possibly reversed.</param>
		/// <param name="lo">index of the first element in the run.</param>
		/// <param name="hi">index after the last element that may be contained in the run. It is required 
		/// that <c><![CDATA[lo < hi]]></c>.</param>
<# if (usesComparer) { #>
		/// <param name="comparer">the comparator to used for the sort.</param>
<# } #>
		/// <returns>the length of the run beginning at the specified position in the specified array</returns>
<# if (isArrayOfNative) { #>
		#if UNSAFE
		unsafe
		#endif
<# } #>
		private static int CountRunAndMakeAscending(<#= arrayArg #>, int lo, int hi<#= comparerArg #>)
		{
<# if (isArrayOfNative) { #>
			#if UNSAFE
			fixed (<#= itemType #> * a = &array[0])
			#else
			var a = array;
			#endif
<# } else { #>
			var a = array;
<# } #>
			{ // fixed (...)
				Debug.Assert(lo < hi);
				var runHi = lo + 1;
				if (runHi == hi) return 1;

				// Find end of run, and reverse range if descending
				if (<#= cmp("a[runHi++]", "a[lo]", "<") #>) // c(a[runHi++], a[lo]) < 0
				{
					// Descending
					while (runHi < hi && <#= cmp("a[runHi]", "a[runHi - 1]", "<") #>) runHi++;
					<#= reverseRangeFunc #>(a, lo, runHi);
				}
				else
				{
					// Ascending
					while (runHi < hi && <#= cmp("a[runHi]", "a[runHi - 1]", ">=") #>) runHi++; // c(a[runHi], a[runHi - 1]) >= 0
				}

				return runHi - lo;
			} // fixed (...)
		}

<# if (!isArray) { #>
        /// <summary>Copies the range from one array to another.</summary>
        /// <param name="buffer">The buffer.</param>
        /// <param name="srcIndex">Source index in array.</param>
        /// <param name="dstIndex">Target index in array.</param>
        /// <param name="length">Number of elements to be copied.</param>
		private static void IndexedCopyRange(<#= arrayType #> buffer, int srcIndex, int dstIndex, int length)
		{
			if (dstIndex > srcIndex) // copy forward to the same array => use reverse order
			{
				srcIndex += length - 1;
				dstIndex += length - 1;
				while (length-- > 0) buffer[dstIndex--] = buffer[srcIndex--];
			}
			else // copy to different array or backwards => use natural order
			{
				while (length-- > 0) buffer[dstIndex++] = buffer[srcIndex++];
			}
		}

		/// <summary>Copies the range from one array to another.</summary>
		/// <param name="src">The source array.</param>
		/// <param name="srcIndex">Starting index in source array.</param>
		/// <param name="dst">The destination array.</param>
		/// <param name="dstIndex">Starting index in destination array.</param>
		/// <param name="length">Number of elements to be copied.</param>
<# if (isNative) { #>
		#if UNSAFE
		unsafe
		#endif
<# } #>
		private static void IndexedCopyRange(<#= itemType #>[] src, int srcIndex, <#= arrayType #> dst, int dstIndex, int length)
		{
<# if (isNative) { #>
			#if UNSAFE
			fixed (<#= itemType #> * s = &src[0])
			#else
			var s = src;
			#endif
<# } else { #>
			var s = src;
<# } #>
			{ // fixed (...)
				while (length-- > 0) dst[dstIndex++] = s[srcIndex++];
			} // fixed (...)
		}
		
		/// <summary>Copies the range from one array to another.</summary>
		/// <param name="src">The source array.</param>
		/// <param name="srcIndex">Starting index in source array.</param>
		/// <param name="dst">The destination array.</param>
		/// <param name="dstIndex">Starting index in destination array.</param>
		/// <param name="length">Number of elements to be copied.</param>
<# if (isNative) { #>
		#if UNSAFE
		unsafe
		#endif
<# } #>
		private static void IndexedCopyRange(<#= arrayType #> src, int srcIndex, <#= itemType #>[] dst, int dstIndex, int length)
		{
<# if (isNative) { #>
			#if UNSAFE
			fixed (<#= itemType #> * d = &dst[0])
			#else
			var d = dst;
			#endif
<# } else { #>
			var d = dst;
<# } #>
			{ // fixed (...)
				while (length-- > 0) d[dstIndex++] = src[srcIndex++];
			} // fixed (...)
		}

		/// <summary>Reverse the specified range of the specified array.</summary>
		/// <param name="array">the array in which a range is to be reversed.</param>
		/// <param name="lo">the index of the first element in the range to be reversed.</param>
		/// <param name="hi">the index after the last element in the range to be reversed.</param>
		private static void IndexedReverseRange(<#= arrayType #> array, int lo, int hi)
		{
			hi--;
			while (lo < hi)
			{
				var t = array[lo];
				array[lo++] = array[hi];
				array[hi--] = t;
			}
		}

<# } #>
<# if (isArrayOfNative) { #>
#if UNSAFE

		/// <summary>Copies range of items.</summary>
		/// <param name="buffer">The buffer.</param>
		/// <param name="sourceIndex">Index of the source.</param>
		/// <param name="targetIndex">Index of the target.</param>
		/// <param name="length">The length.</param>
	    unsafe protected static void ArrayCopyRange(<#= itemType #>* buffer, int sourceIndex, int targetIndex, int length)
	    {
			if (sourceIndex >= targetIndex)
			{
                var source = buffer + sourceIndex;
                var target = buffer + targetIndex;
				while (length-- > 0) *target++ = *source++;
			}
			else
			{
				var source = buffer + sourceIndex + length - 1;
                var target = buffer + targetIndex + length - 1;
				while (length-- > 0) *target-- = *source--;
			}
	    }

		/// <summary>Copies range of items.</summary>
		/// <param name="source">The source buffer.</param>
		/// <param name="sourceIndex">Index of the source.</param>
		/// <param name="target">The target buffer.</param>
		/// <param name="targetIndex">Index of the target.</param>
		/// <param name="length">The length.</param>
	    unsafe protected static void ArrayCopyRange(<#= itemType #>* source, int sourceIndex, <#= itemType #>* target, int targetIndex, int length)
	    {
			source += sourceIndex;
			target += targetIndex;
			while (length-- > 0) *target++ = *source++;
	    }

		/// <summary>Reverse the specified range of the specified array.</summary>
		/// <param name="array">the array in which a range is to be reversed.</param>
		/// <param name="lo">the index of the first element in the range to be reversed.</param>
		/// <param name="hi">the index after the last element in the range to be reversed.</param>
	    unsafe protected static void ArrayReverseRange(<#= itemType #>* array, int lo, int hi)
	    {
			var loPtr = array + lo;
			var hiPtr = array + hi - 1;
			while (loPtr < hiPtr)
			{
				var t = *loPtr;
				*loPtr++ = *hiPtr;
				*hiPtr-- = t;
			}
	    }

#endif
<# } #>
		/// <summary>
		/// Merges the two runs at stack indices i and i+1.  Run i must be the penultimate 
		/// or antepenultimate run on the stack. In other words, i must be equal to 
		/// stackSize-2 or stackSize-3.
		/// </summary>
		/// <param name="runIndex">Stack index of the first of the two runs to merge.</param>
		protected override void MergeAt(int runIndex)
		{
			Debug.Assert(_stackSize >= 2);
			Debug.Assert(runIndex >= 0);
			Debug.Assert(runIndex == _stackSize - 2 || runIndex == _stackSize - 3);
			
<# if (usesComparer) { #>
			var comparer = _comparer;
<# } #>
			var base1 = _runBase[runIndex];
			var len1 = _runLength[runIndex];
			var base2 = _runBase[runIndex + 1];
			var len2 = _runLength[runIndex + 1];
			Debug.Assert(len1 > 0 && len2 > 0);
			Debug.Assert(base1 + len1 == base2);

			// Record the length of the combined runs; if i is the 3rd-last
			// run now, also slide over the last run (which isn't involved
			// in this merge). The current run (i+1) goes away in any case.
			_runLength[runIndex] = len1 + len2;
			if (runIndex == _stackSize - 3)
			{
				_runBase[runIndex + 1] = _runBase[runIndex + 2];
				_runLength[runIndex + 1] = _runLength[runIndex + 2];
			}
			_stackSize--;

			// Find where the first element of run2 goes in run1. Prior elements
			// in run1 can be ignored (because they're already in place).
			var k = GallopRight(_array[base2], _array, base1, len1, 0<#= comparerOpt #>);
			Debug.Assert(k >= 0);
			base1 += k;
			len1 -= k;
			if (len1 == 0) return;

			// Find where the last element of run1 goes in run2. Subsequent elements
			// in run2 can be ignored (because they're already in place).
			len2 = GallopLeft(_array[base1 + len1 - 1], _array, base2, len2, len2 - 1<#= comparerOpt #>);
			Debug.Assert(len2 >= 0);
			if (len2 == 0) return;

			// Merge remaining runs, using tmp array with min(len1, len2) elements
			if (len1 <= len2)
				MergeLo(base1, len1, base2, len2);
			else
				MergeHi(base1, len1, base2, len2);
		}

		/// <summary>
		/// Locates the position at which to insert the specified key into the
		/// specified sorted range; if the range contains an element equal to key,
		/// returns the index of the leftmost equal element.
		/// </summary>
		/// <param name="key">the key whose insertion point to search for.</param>
		/// <param name="array">the array in which to search.</param>
		/// <param name="lo">the index of the first element in the range.</param>
		/// <param name="length">the length of the range; must be &gt; 0.</param>
		/// <param name="hint">the index at which to begin the search, 0 &lt;= hint &lt; n. 
		/// The closer hint is to the result, the faster this method will run.</param>
<# if (usesComparer) { #>
		/// <param name="comparer">the comparator used to order the range, and to search.</param>
<# } #>
		/// <returns>the int k,  0 &lt;= k &lt;= n such that a[b + k - 1] &lt; key &lt;= a[b + k], pretending that a[b - 1] 
		/// is minus infinity and a[b + n] is infinity. In other words, key belongs at index b + k; or in other words, the 
		/// first k elements of a should precede key, and the last n - k should follow it.</returns>
<# if (isArrayOfNative) { #>
		#if UNSAFE
		unsafe
		#endif
<# } #>
		internal static int GallopLeft(<#= itemType #> key, <#= arrayArg #>, int lo, int length, int hint<#= comparerArg #>)
		{
<# if (isArrayOfNative) { #>
			#if UNSAFE
			fixed (<#= itemType #> * a = &array[0])
			#else
			var a = array;
			#endif
<# } else { #>
			var a = array;
<# } #>
			{ // fixed (...)
				Debug.Assert(length > 0 && hint >= 0 && hint < length);
				var lastOfs = 0;
				var ofs = 1;

				if (<#= cmp("key", "a[lo + hint]", ">") #>) // comparer(key, a[lo + hint]) > 0
				{
					// Gallop right until a[base+hint+lastOfs] < key <= a[base+hint+ofs]
					var maxOfs = length - hint;
					while (ofs < maxOfs && <#= cmp("key", "a[lo + hint + ofs]", ">") #>) // comparer(key, a[lo + hint + ofs]) > 0
					{
						lastOfs = ofs;
						ofs = (ofs << 1) + 1;
						if (ofs <= 0)   // int overflow
							ofs = maxOfs;
					}
					if (ofs > maxOfs)
						ofs = maxOfs;

					// Make offsets relative to base
					lastOfs += hint;
					ofs += hint;
				}
				else // if (key <= a[base + hint])
				{
					// Gallop left until a[base+hint-ofs] < key <= a[base+hint-lastOfs]
					var maxOfs = hint + 1;
					while (ofs < maxOfs && <#= cmp("key", "a[lo + hint - ofs]", "<=") #>) // comparer(key, a[lo + hint - ofs]) <= 0
					{
						lastOfs = ofs;
						ofs = (ofs << 1) + 1;
						if (ofs <= 0) // int overflow
							ofs = maxOfs;
					}
					if (ofs > maxOfs)
						ofs = maxOfs;

					// Make offsets relative to base
					var tmp = lastOfs;
					lastOfs = hint - ofs;
					ofs = hint - tmp;
				}
				Debug.Assert(-1 <= lastOfs && lastOfs < ofs && ofs <= length);

				// Now a[base+lastOfs] < key <= a[base+ofs], so key belongs somewhere
				// to the right of lastOfs but no farther right than ofs.  Do a binary
				// search, with invariant a[base + lastOfs - 1] < key <= a[base + ofs].
				lastOfs++;
				while (lastOfs < ofs)
				{
					var m = lastOfs + ((ofs - lastOfs) >> 1);

					if (<#= cmp("key", "a[lo + m]", ">") #>) // comparer(key, a[lo + m]) > 0
						lastOfs = m + 1; // a[base + m] < key
					else
						ofs = m; // key <= a[base + m]
				}
				Debug.Assert(lastOfs == ofs); // so a[base + ofs - 1] < key <= a[base + ofs]
				return ofs;
			} // fixed (...)
		}

		/// <summary>
		/// Like GallopLeft, except that if the range contains an element equal to
		/// key, GallopRight returns the index after the rightmost equal element.
		/// </summary>
		/// <param name="key">the key whose insertion point to search for.</param>
		/// <param name="array">the array in which to search.</param>
		/// <param name="lo">the index of the first element in the range.</param>
		/// <param name="length">the length of the range; must be &gt; 0.</param>
		/// <param name="hint">the index at which to begin the search, 0 &lt;= hint &lt; n. The closer hint is to the result, 
		/// the faster this method will run.</param>
<# if (usesComparer) { #>
		/// <param name="comparer">the comparator used to order the range, and to search.</param>
<# } #>
		/// <returns>int k, that 0 &lt;= k &lt;= n such that a[b + k - 1] &lt;= key &lt; a[b + k]</returns>
<# if (isArrayOfNative) { #>
		#if UNSAFE
		unsafe
		#endif
<# } #>
		internal static int GallopRight(<#= itemType #> key, <#= arrayArg #>, int lo, int length, int hint<#= comparerArg #>)
		{
<# if (isArrayOfNative) { #>
			#if UNSAFE
			fixed (<#= itemType #> * a = &array[0])
			#else
			var a = array;
			#endif
<# } else { #>
			var a = array;
<# } #>
			{
				Debug.Assert(length > 0 && hint >= 0 && hint < length);

				var ofs = 1;
				var lastOfs = 0;
				if (<#= cmp("key", "a[lo + hint]", "<") #>) // comparer(key, a[lo + hint]) < 0
				{
					// Gallop left until a[b+hint - ofs] <= key < a[b+hint - lastOfs]
					var maxOfs = hint + 1;
					while (ofs < maxOfs && <#= cmp("key", "a[lo + hint - ofs]", "<") #>)
					{
						lastOfs = ofs;
						ofs = (ofs << 1) + 1;
						if (ofs <= 0)   // int overflow
							ofs = maxOfs;
					}
					if (ofs > maxOfs)
						ofs = maxOfs;

					// Make offsets relative to b
					var tmp = lastOfs;
					lastOfs = hint - ofs;
					ofs = hint - tmp;
				}
				else
				{
					// a[b + hint] <= key
					// Gallop right until a[b+hint + lastOfs] <= key < a[b+hint + ofs]
					var maxOfs = length - hint;
					while (ofs < maxOfs && <#= cmp("key", "a[lo + hint + ofs]", ">=") #>)
					{
						lastOfs = ofs;
						ofs = (ofs << 1) + 1;
						if (ofs <= 0)   // int overflow
							ofs = maxOfs;
					}
					if (ofs > maxOfs)
						ofs = maxOfs;

					// Make offsets relative to b
					lastOfs += hint;
					ofs += hint;
				}
				Debug.Assert(-1 <= lastOfs && lastOfs < ofs && ofs <= length);

				// Now a[b + lastOfs] <= key < a[b + ofs], so key belongs somewhere to
				// the right of lastOfs but no farther right than ofs.  Do a binary
				// search, with invariant a[b + lastOfs - 1] <= key < a[b + ofs].
				lastOfs++;
				while (lastOfs < ofs)
				{
					var m = lastOfs + ((ofs - lastOfs) >> 1);

					if (<#= cmp("key", "a[lo + m]", "<") #>)
						ofs = m; // key < a[b + m]
					else
						lastOfs = m + 1; // a[b + m] <= key
				}

				Debug.Assert(lastOfs == ofs); // so a[b + ofs - 1] <= key < a[b + ofs]
				return ofs;
			} // fixed (...)
		}

		/// <summary>
		/// Merges two adjacent runs in place, in a stable fashion. The first element of the first run must be greater than 
		/// the first element of the second run (a[base1] &gt; a[base2]), and the last element of the first run 
		/// (a[base1 + len1-1]) must be greater than all elements of the second run.
		/// For performance, this method should be called only when len1 &lt;= len2; its twin, mergeHi should be called if 
		/// len1 &gt;= len2. (Either method may be called if len1 == len2.)
		/// </summary>
		/// <param name="base1">index of first element in first run to be merged.</param>
		/// <param name="len1">length of first run to be merged (must be &gt; 0).</param>
		/// <param name="base2">index of first element in second run to be merged (must be aBase + aLen).</param>
		/// <param name="len2">length of second run to be merged (must be &gt; 0).</param>
<# if (isArrayOfNative) { #>
		#if UNSAFE
		unsafe
		#endif
<# } #>
		private void MergeLo(int base1, int len1, int base2, int len2)
		{
			Debug.Assert(len1 > 0 && len2 > 0 && base1 + len1 == base2);

			// Copy first run into temp array
			var array = _array;
			var mergeBuffer = EnsureCapacity(len1);

<# if (isArrayOfNative) { #>
			#if UNSAFE
			fixed (<#= itemType #> * m = &mergeBuffer[0])
			fixed (<#= itemType #> * a = &array[0])
			#else
			var m = mergeBuffer;
			var a = array;
			#endif
<# } else { #>
			var m = mergeBuffer;
			var a = array;
<# } #>
			{ // fixed (...)
				<#= copyRangeFunc #>(a, base1, m, 0, len1);

				var cursor1 = 0;       // Indexes into tmp array
				var cursor2 = base2;   // Indexes int a
				var dest = base1;      // Indexes int a

				// Move first element of second run and deal with degenerate cases
				a[dest++] = a[cursor2++];
				if (--len2 == 0)
				{
					<#= copyRangeFunc #>(m, cursor1, a, dest, len1);
					return;
				}
				if (len1 == 1)
				{
					<#= copyRangeFunc #>(a, cursor2, dest, len2);
					a[dest + len2] = m[cursor1]; // Last elt of run 1 to end of merge
					return;
				}

<# if (usesComparer) { #>
				var comparer = _comparer;  // Use local variables for performance
<# } #>
				var minGallop = _minGallop;

				while (true)
				{
					var count1 = 0; // Number of times in a row that first run won
					var count2 = 0; // Number of times in a row that second run won

					// Do the straightforward thing until (if ever) one run starts
					// winning consistently.
					do
					{
						Debug.Assert(len1 > 1 && len2 > 0);
						if (<#= cmp("a[cursor2]", "m[cursor1]", "<") #>) // c(a[cursor2], m[cursor1]) < 0
						{
							a[dest++] = a[cursor2++];
							count2++;
							count1 = 0;
							if (--len2 == 0)
								goto break_outer;
						}
						else
						{
							a[dest++] = m[cursor1++];
							count1++;
							count2 = 0;
							if (--len1 == 1)
								goto break_outer;
						}
					} while ((count1 | count2) < minGallop);

					// One run is winning so consistently that galloping may be a
					// huge win. So try that, and continue galloping until (if ever)
					// neither run appears to be winning consistently anymore.
					do
					{
						Debug.Assert(len1 > 1 && len2 > 0);
						count1 = <#= arraySorterName #>GallopRight(a[cursor2], mergeBuffer, cursor1, len1, 0<#= comparerOpt #>);
						if (count1 != 0)
						{
							<#= copyRangeFunc #>(m, cursor1, a, dest, count1);
							dest += count1;
							cursor1 += count1;
							len1 -= count1;
							if (len1 <= 1) // len1 == 1 || len1 == 0
								goto break_outer;
						}
						a[dest++] = a[cursor2++];
						if (--len2 == 0)
							goto break_outer;

						count2 = GallopLeft(m[cursor1], array, cursor2, len2, 0<#= comparerOpt #>);
						if (count2 != 0)
						{
							<#= copyRangeFunc #>(a, cursor2, dest, count2);
							dest += count2;
							cursor2 += count2;
							len2 -= count2;
							if (len2 == 0)
								goto break_outer;
						}
						a[dest++] = m[cursor1++];
						if (--len1 == 1)
							goto break_outer;
						minGallop--;
					} while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);

					if (minGallop < 0)
						minGallop = 0;
					minGallop += 2;  // Penalize for leaving gallop mode
				}  // End of "outer" loop

			break_outer: // goto me! ;)

				_minGallop = minGallop < 1 ? 1 : minGallop;  // Write back to field

				if (len1 == 1)
				{
					Debug.Assert(len2 > 0);
					<#= copyRangeFunc #>(a, cursor2, dest, len2);
					a[dest + len2] = m[cursor1]; //  Last elt of run 1 to end of merge
				}
				else if (len1 == 0)
				{
					throw new ArgumentException("Comparison method violates its general contract!");
				}
				else
				{
					Debug.Assert(len2 == 0);
					Debug.Assert(len1 > 1);
					<#= copyRangeFunc #>(m, cursor1, a, dest, len1);
				}
			} // fixed (...)
		}

		/// <summary>
		/// Like mergeLo, except that this method should be called only if
		/// len1 &gt;= len2; mergeLo should be called if len1 &lt;= len2. (Either method may be called if len1 == len2.)
		/// </summary>
		/// <param name="base1">index of first element in first run to be merged.</param>
		/// <param name="len1">length of first run to be merged (must be &gt; 0).</param>
		/// <param name="base2">index of first element in second run to be merged (must be aBase + aLen).</param>
		/// <param name="len2">length of second run to be merged (must be &gt; 0).</param>
<# if (isArrayOfNative) { #>
		#if UNSAFE
		unsafe
		#endif
<# } #>
		private void MergeHi(int base1, int len1, int base2, int len2)
		{
			Debug.Assert(len1 > 0 && len2 > 0 && base1 + len1 == base2);

			// Copy second run into temp array
			var array = _array; // For performance
			var mergeBuffer = EnsureCapacity(len2);

<# if (isArrayOfNative) { #>
			#if UNSAFE
			fixed (<#= itemType #> * m = &mergeBuffer[0])
			fixed (<#= itemType #> * a = &array[0])
			#else
			var m = mergeBuffer;
			var a = array;
			#endif
<# } else { #>
			var m = mergeBuffer;
			var a = array;
<# } #>
			{ // fixed (...)
				<#= copyRangeFunc #>(a, base2, m, 0, len2);

				var cursor1 = base1 + len1 - 1;  // Indexes into a
				var cursor2 = len2 - 1;          // Indexes into mergeBuffer array
				var dest = base2 + len2 - 1;     // Indexes into a

				// Move last element of first run and deal with degenerate cases
				a[dest--] = a[cursor1--];
				if (--len1 == 0)
				{
					<#= copyRangeFunc #>(m, 0, a, dest - (len2 - 1), len2);
					return;
				}
				if (len2 == 1)
				{
					dest -= len1;
					cursor1 -= len1;
					<#= copyRangeFunc #>(a, cursor1 + 1, dest + 1, len1);
					a[dest] = m[cursor2];
					return;
				}

<# if (usesComparer) { #>
				var comparer = _comparer;  // Use local variables for performance
<# } #>
				var minGallop = _minGallop;

				while (true)
				{
					var count1 = 0; // Number of times in a row that first run won
					var count2 = 0; // Number of times in a row that second run won

					// Do the straightforward thing until (if ever) one run appears to win consistently.
					do
					{
						Debug.Assert(len1 > 0 && len2 > 1);
						if (<#= cmp("m[cursor2]", "a[cursor1]", "<") #>) // c(m[cursor2], a[cursor1]) < 0
						{
							a[dest--] = a[cursor1--];
							count1++;
							count2 = 0;
							if (--len1 == 0)
								goto break_outer;
						}
						else
						{
							a[dest--] = m[cursor2--];
							count2++;
							count1 = 0;
							if (--len2 == 1)
								goto break_outer;
						}
					} while ((count1 | count2) < minGallop);

					// One run is winning so consistently that galloping may be a
					// huge win. So try that, and continue galloping until (if ever)
					// neither run appears to be winning consistently anymore.
					do
					{
						Debug.Assert(len1 > 0 && len2 > 1);
						count1 = len1 - GallopRight(m[cursor2], array, base1, len1, len1 - 1<#= comparerOpt #>);
						if (count1 != 0)
						{
							dest -= count1;
							cursor1 -= count1;
							len1 -= count1;
							<#= copyRangeFunc #>(a, cursor1 + 1, dest + 1, count1);
							if (len1 == 0)
								goto break_outer;
						}
						a[dest--] = m[cursor2--];
						if (--len2 == 1)
							goto break_outer;

						count2 = len2 - <#= arraySorterName #>GallopLeft(a[cursor1], mergeBuffer, 0, len2, len2 - 1<#= comparerOpt #>);
						if (count2 != 0)
						{
							dest -= count2;
							cursor2 -= count2;
							len2 -= count2;
							<#= copyRangeFunc #>(m, cursor2 + 1, a, dest + 1, count2);
							if (len2 <= 1)  // len2 == 1 || len2 == 0
								goto break_outer;
						}
						a[dest--] = a[cursor1--];
						if (--len1 == 0)
							goto break_outer;
						minGallop--;
					} while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);

					if (minGallop < 0)
						minGallop = 0;
					minGallop += 2;  // Penalize for leaving gallop mode
				} // End of "outer" loop

			break_outer: // goto me! ;)

				_minGallop = minGallop < 1 ? 1 : minGallop;  // Write back to field

				if (len2 == 1)
				{
					Debug.Assert(len1 > 0);
					dest -= len1;
					cursor1 -= len1;
					<#= copyRangeFunc #>(a, cursor1 + 1, dest + 1, len1);
					a[dest] = m[cursor2];  // Move first elt of run2 to front of merge
				}
				else if (len2 == 0)
				{
					throw new ArgumentException("Comparison method violates its general contract!");
				}
				else
				{
					Debug.Assert(len1 == 0);
					Debug.Assert(len2 > 0);
					<#= copyRangeFunc #>(m, 0, a, dest - (len2 - 1), len2);
				}
			} // fixed (...)
		}
	}

	#endregion
<# } #>

}

// ReSharper restore CheckNamespace

<#+
    public enum CompareMethod
    {
        Native,
        Comparable,
        Comparer,
    }

    public class VectorDefinition
    {
        public bool IsTemplate { get { return ItemType == null; } }
        public bool IsArray { get { return VectorType == null; } }

        public string Name { get; set; }
        public string ItemType { get; set; }
        public string VectorType { get; set; }
        public string ArraySorter { get; set; }
        public CompareMethod CompareMethod { get; set; }
    }
#>